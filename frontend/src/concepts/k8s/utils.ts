import { K8sResourceCommon } from 'mod-arch-shared/dist/types/common';
import { genRandomChars } from 'mod-arch-shared/dist/utilities/string';

/**
 * Notebook resource name validator - must start with a letter and contain only lowercase letters, numbers, and hyphens
 */
export const K8_NOTEBOOK_RESOURCE_NAME_VALIDATOR = /^[a-z]([a-z0-9-]*[a-z0-9])?$/;

/**
 * Gets description from K8s resource metadata annotations
 */
export const getDescriptionFromK8sResource = (resource: K8sResourceCommon): string =>
  resource.metadata?.annotations?.['openshift.io/description'] || '';

/**
 * Gets display name from K8s resource metadata annotations
 */
export const getDisplayNameFromK8sResource = (resource: K8sResourceCommon): string =>
  resource.metadata?.annotations?.['openshift.io/display-name'] || resource.metadata?.name || '';

/**
 * Checks if resource is a DSG (Data Science Group) resource
 */
export const isK8sDSGResource = (resource: unknown): resource is K8sResourceCommon =>
  typeof resource === 'object' && resource !== null && 'metadata' in resource;

/**
 * Validates K8s resource name against RFC 1123 subdomain rules
 */
export const isValidK8sName = (name: string | undefined, regexp?: RegExp): boolean => {
  if (name === undefined) {
    return true; // undefined is considered valid
  }

  if (!name) {
    return false; // empty string is invalid
  }

  if (regexp) {
    return regexp.test(name);
  }

  // RFC 1123 subdomain rules
  const k8sNameRegex = /^[a-z0-9]([-a-z0-9]*[a-z0-9])?$/;
  return k8sNameRegex.test(name);
};

export type AdditionalCriteriaForTranslation = {
  maxLength?: number;
  safeK8sPrefix?: string;
  staticPrefix?: boolean;
};

/**
 * Translates display name to valid K8s resource name
 */
export const translateDisplayNameForK8s = (
  displayName: string,
  additionalCriteria: AdditionalCriteriaForTranslation = {},
): string => {
  const { maxLength = 253, safeK8sPrefix = '', staticPrefix = false } = additionalCriteria;

  // If displayName is empty, return empty string (don't default to 'unnamed')
  if (!displayName.trim()) {
    return '';
  }

  // Convert to lowercase and replace invalid characters with hyphens
  // Special handling for apostrophes followed by 's' to remove the 's'
  let k8sName = displayName
    .toLowerCase()
    .replace(/'s\b/g, 's') // Replace "'s" with "s"
    .replace(/[^a-z0-9-]/g, '-')
    .replace(/-+/g, '-') // Replace multiple consecutive hyphens with single hyphen
    .replace(/^-|-$/g, ''); // Remove leading/trailing hyphens

  // Handle prefix
  let prefix = '';
  if (staticPrefix && safeK8sPrefix) {
    prefix = safeK8sPrefix;
  } else if (safeK8sPrefix && /^[0-9]/.test(k8sName)) {
    // Add prefix if name starts with number
    prefix = safeK8sPrefix;
  }

  // Calculate available length for the name part
  const availableLength = maxLength - prefix.length;

  // Truncate if necessary
  if (k8sName.length > availableLength) {
    k8sName = k8sName.substring(0, availableLength);
    // Remove trailing hyphen if truncation caused one
    k8sName = k8sName.replace(/-$/, '');
  }

  // Ensure it's not empty and doesn't start/end with hyphen (only if we had a non-empty input)
  if (!k8sName || k8sName === '-') {
    k8sName = 'unnamed';
  }

  return prefix + k8sName;
};

export type TranslationReport = {
  autoGenerated: boolean;
  safeK8sPrefix: boolean;
  maxLength: boolean;
  staticPrefix: boolean;
};

/**
 * Translates display name to valid K8s resource name and reports what changes were made
 */
export const translateDisplayNameForK8sAndReport = (
  displayName: string,
  additionalCriteria: AdditionalCriteriaForTranslation = {},
): [string, TranslationReport] => {
  const { maxLength = 253, safeK8sPrefix = '', staticPrefix = false } = additionalCriteria;

  const report: TranslationReport = {
    autoGenerated: false,
    safeK8sPrefix: false,
    maxLength: false,
    staticPrefix: false,
  };

  // If displayName is empty or only whitespace, return empty string
  if (!displayName.trim()) {
    return ['', report];
  }

  // Convert to lowercase and replace invalid characters with hyphens
  // Special handling for apostrophes followed by 's' to remove the 's'
  let k8sName = displayName
    .toLowerCase()
    .replace(/'s\b/g, 's') // Replace "'s" with "s"
    .replace(/[^a-z0-9-]/g, '-')
    .replace(/-+/g, '-') // Replace multiple consecutive hyphens with single hyphen
    .replace(/^-|-$/g, ''); // Remove leading/trailing hyphens

  // Check if we need to generate a name (invalid characters only)
  if (!k8sName || k8sName === '-') {
    const generatedSuffix = genRandomChars(12);
    k8sName = `gen-${generatedSuffix}`;
    report.autoGenerated = true;
  }

  // Handle prefix - apply safeK8sPrefix if provided, regardless of whether name starts with number for auto-generated names
  let prefix = '';
  if (staticPrefix && safeK8sPrefix) {
    prefix = safeK8sPrefix;
    report.staticPrefix = true;
    report.safeK8sPrefix = true;
  } else if (safeK8sPrefix && (/^[0-9]/.test(k8sName) || report.autoGenerated)) {
    // Add prefix if name starts with number OR if it's auto-generated
    prefix = safeK8sPrefix;
    report.safeK8sPrefix = true;
  }

  // Calculate available length for the name part
  const availableLength = maxLength - prefix.length;

  // Truncate if necessary
  if (k8sName.length > availableLength) {
    k8sName = k8sName.substring(0, availableLength);
    // Remove trailing hyphen if truncation caused one
    k8sName = k8sName.replace(/-$/, '');
    report.maxLength = true;
  }

  // Handle edge cases where prefix + truncation results in problematic names
  if (prefix && availableLength <= 0) {
    // If prefix is too long for maxLength, just use the prefix without trailing dash
    k8sName = prefix.replace(/-$/, '');
    // Don't reset safeK8sPrefix to false - it was still applied, just truncated
    return [k8sName, report];
  }

  // Special handling for auto-generated names with very short maxLength
  if (report.autoGenerated && availableLength < 4) {
    // For auto-generated names that would be too short, just return "gen"
    if (prefix) {
      // If we have a prefix but very short maxLength, use the prefix without dash
      return [prefix.replace(/-$/, ''), report];
    }
    return ['gen', report];
  }

  return [prefix + k8sName, report];
};

export type K8sModel = {
  kind: string;
  apiVersion: string;
  apiGroup?: string;
  plural: string;
};

/**
 * Formats the API version string for a Kubernetes resource model
 */
export const kindApiVersion = (model: K8sModel): string => {
  if (!model.kind || !model.apiVersion) {
    return '';
  }

  if (model.apiGroup) {
    return `${model.apiGroup}/${model.apiVersion}`;
  }

  return model.apiVersion;
};
